(window.webpackJsonp=window.webpackJsonp||[]).push([[22],{643:function(n,s,e){"use strict";e.r(s);var r=e(34),E=Object(r.a)({},(function(){var n=this,s=n.$createElement,e=n._self._c||s;return e("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[e("h1",{attrs:{id:"реалізація-інформаціиного-та-програмного-забезпечення"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#реалізація-інформаціиного-та-програмного-забезпечення"}},[n._v("#")]),n._v(" Реалізація інформаційного та програмного забезпечення")]),n._v(" "),e("p",[n._v("В рамках проекту розробляється:")]),n._v(" "),e("h2",{attrs:{id:"sql-скрипт-для-створення-на-початкового-наповнення-бази-даних"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#sql-скрипт-для-створення-на-початкового-наповнення-бази-даних"}},[n._v("#")]),n._v(" SQL-скрипт для створення на початкового наповнення бази даних")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("-- MySQL Workbench Forward Engineering\n\nSET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;\nSET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;\nSET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION';\n\n-- -----------------------------------------------------\n-- Schema survey-db\n-- -----------------------------------------------------\nDROP SCHEMA IF EXISTS `survey-db` ;\n\n-- -----------------------------------------------------\n-- Schema survey-db\n-- -----------------------------------------------------\nCREATE SCHEMA IF NOT EXISTS `survey-db` DEFAULT CHARACTER SET utf8 ;\nUSE `survey-db` ;\n\n-- -----------------------------------------------------\n-- Table `survey-db`.`users`\n-- -----------------------------------------------------\nDROP TABLE IF EXISTS `survey-db`.`users` ;\n\nCREATE TABLE IF NOT EXISTS `survey-db`.`users` (\n  `id` INT NOT NULL AUTO_INCREMENT,\n  `username` VARCHAR(45) NOT NULL,\n  `email` VARCHAR(45) NOT NULL,\n  `password` VARCHAR(45) NOT NULL,\n  PRIMARY KEY (`id`))\nENGINE = InnoDB;\n\n\n-- -----------------------------------------------------\n-- Table `survey-db`.`experts`\n-- -----------------------------------------------------\nDROP TABLE IF EXISTS `survey-db`.`experts` ;\n\nCREATE TABLE IF NOT EXISTS `survey-db`.`experts` (\n  `id` INT NOT NULL AUTO_INCREMENT,\n  `username` VARCHAR(45) NOT NULL,\n  `email` VARCHAR(45) NOT NULL,\n  `password` VARCHAR(45) NOT NULL,\n  `job` VARCHAR(45) NOT NULL,\n  `users_id` INT NOT NULL,\n  PRIMARY KEY (`id`),\n  INDEX `fk_experts_users_idx` (`users_id` ASC) VISIBLE,\n  CONSTRAINT `fk_experts_users`\n    FOREIGN KEY (`users_id`)\n    REFERENCES `survey-db`.`users` (`id`)\n    ON DELETE NO ACTION\n    ON UPDATE NO ACTION)\nENGINE = InnoDB;\n\n\n-- -----------------------------------------------------\n-- Table `survey-db`.`quizes`\n-- -----------------------------------------------------\nDROP TABLE IF EXISTS `survey-db`.`quizes` ;\n\nCREATE TABLE IF NOT EXISTS `survey-db`.`quizes` (\n  `id` INT NOT NULL AUTO_INCREMENT,\n  `text` VARCHAR(45) NULL,\n  `expiration_date` DATETIME NOT NULL,\n  `users_id` INT NOT NULL,\n  PRIMARY KEY (`id`),\n  INDEX `fk_quiz_users1_idx` (`users_id` ASC) VISIBLE,\n  CONSTRAINT `fk_quiz_users1`\n    FOREIGN KEY (`users_id`)\n    REFERENCES `survey-db`.`users` (`id`)\n    ON DELETE NO ACTION\n    ON UPDATE NO ACTION)\nENGINE = InnoDB;\n\n\n-- -----------------------------------------------------\n-- Table `survey-db`.`questions`\n-- -----------------------------------------------------\nDROP TABLE IF EXISTS `survey-db`.`questions` ;\n\nCREATE TABLE IF NOT EXISTS `survey-db`.`questions` (\n  `id` INT NOT NULL AUTO_INCREMENT,\n  `text` VARCHAR(45) NOT NULL,\n  `type` INT NOT NULL,\n  `quiz_id` INT NOT NULL,\n  PRIMARY KEY (`id`),\n  INDEX `fk_questions_quiz1_idx` (`quiz_id` ASC) VISIBLE,\n  CONSTRAINT `fk_questions_quiz1`\n    FOREIGN KEY (`quiz_id`)\n    REFERENCES `survey-db`.`quizes` (`id`)\n    ON DELETE NO ACTION\n    ON UPDATE NO ACTION)\nENGINE = InnoDB;\n\n\n-- -----------------------------------------------------\n-- Table `survey-db`.`options`\n-- -----------------------------------------------------\nDROP TABLE IF EXISTS `survey-db`.`options` ;\n\nCREATE TABLE IF NOT EXISTS `survey-db`.`options` (\n  `id` INT NOT NULL AUTO_INCREMENT,\n  `text` VARCHAR(45) NOT NULL,\n  `questions_id` INT NOT NULL,\n  `isCorrect` TINYINT NULL,\n  PRIMARY KEY (`id`),\n  INDEX `fk_answers_questions1_idx` (`questions_id` ASC) VISIBLE,\n  CONSTRAINT `fk_answers_questions1`\n    FOREIGN KEY (`questions_id`)\n    REFERENCES `survey-db`.`questions` (`id`)\n    ON DELETE NO ACTION\n    ON UPDATE NO ACTION)\nENGINE = InnoDB;\n\n\n-- -----------------------------------------------------\n-- Table `survey-db`.` options`\n-- -----------------------------------------------------\nDROP TABLE IF EXISTS `survey-db`.` options` ;\n\nCREATE TABLE IF NOT EXISTS `survey-db`.` options` (\n  `id` INT NOT NULL AUTO_INCREMENT,\n  `text` VARCHAR(45) NOT NULL,\n  PRIMARY KEY (`id`))\nENGINE = InnoDB;\n\n\n-- -----------------------------------------------------\n-- Table `survey-db`.`selected_options`\n-- -----------------------------------------------------\nDROP TABLE IF EXISTS `survey-db`.`selected_options` ;\n\nCREATE TABLE IF NOT EXISTS `survey-db`.`selected_options` (\n  `id` INT NOT NULL AUTO_INCREMENT,\n  ` options_id` INT NOT NULL,\n  PRIMARY KEY (`id`),\n  INDEX `fk_selected_options_ options1_idx` (` options_id` ASC) VISIBLE,\n  CONSTRAINT `fk_selected_options_ options1`\n    FOREIGN KEY (` options_id`)\n    REFERENCES `survey-db`.` options` (`id`)\n    ON DELETE NO ACTION\n    ON UPDATE NO ACTION)\nENGINE = InnoDB;\n\n\n-- -----------------------------------------------------\n-- Table `survey-db`.`users_has_quiz`\n-- -----------------------------------------------------\nDROP TABLE IF EXISTS `survey-db`.`users_has_quiz` ;\n\nCREATE TABLE IF NOT EXISTS `survey-db`.`users_has_quiz` (\n  `users_id` INT NOT NULL,\n  `quiz_id` INT NOT NULL,\n  PRIMARY KEY (`users_id`, `quiz_id`),\n  INDEX `fk_users_has_quiz_quiz1_idx` (`quiz_id` ASC) VISIBLE,\n  INDEX `fk_users_has_quiz_users1_idx` (`users_id` ASC) VISIBLE,\n  CONSTRAINT `fk_users_has_quiz_users1`\n    FOREIGN KEY (`users_id`)\n    REFERENCES `survey-db`.`users` (`id`)\n    ON DELETE NO ACTION\n    ON UPDATE NO ACTION,\n  CONSTRAINT `fk_users_has_quiz_quiz1`\n    FOREIGN KEY (`quiz_id`)\n    REFERENCES `survey-db`.`quizes` (`id`)\n    ON DELETE NO ACTION\n    ON UPDATE NO ACTION)\nENGINE = InnoDB;\n\n\n-- -----------------------------------------------------\n-- Table `survey-db`.`users_has_quiz1`\n-- -----------------------------------------------------\nDROP TABLE IF EXISTS `survey-db`.`users_has_quiz1` ;\n\nCREATE TABLE IF NOT EXISTS `survey-db`.`users_has_quiz1` (\n  `users_id` INT NOT NULL,\n  `quiz_id` INT NOT NULL,\n  PRIMARY KEY (`users_id`, `quiz_id`),\n  INDEX `fk_users_has_quiz1_quiz1_idx` (`quiz_id` ASC) VISIBLE,\n  INDEX `fk_users_has_quiz1_users1_idx` (`users_id` ASC) VISIBLE,\n  CONSTRAINT `fk_users_has_quiz1_users1`\n    FOREIGN KEY (`users_id`)\n    REFERENCES `survey-db`.`users` (`id`)\n    ON DELETE NO ACTION\n    ON UPDATE NO ACTION,\n  CONSTRAINT `fk_users_has_quiz1_quiz1`\n    FOREIGN KEY (`quiz_id`)\n    REFERENCES `survey-db`.`quizes` (`id`)\n    ON DELETE NO ACTION\n    ON UPDATE NO ACTION)\nENGINE = InnoDB;\n\n\n-- -----------------------------------------------------\n-- Table `survey-db`.`quiz_states`\n-- -----------------------------------------------------\nDROP TABLE IF EXISTS `survey-db`.`quiz_states` ;\n\nCREATE TABLE IF NOT EXISTS `survey-db`.`quiz_states` (\n  `id` INT NOT NULL AUTO_INCREMENT,\n  `state_name` VARCHAR(45) NOT NULL,\n  PRIMARY KEY (`id`))\nENGINE = InnoDB;\n\n\n-- -----------------------------------------------------\n-- Table `survey-db`.`quiz_actions`\n-- -----------------------------------------------------\nDROP TABLE IF EXISTS `survey-db`.`quiz_actions` ;\n\nCREATE TABLE IF NOT EXISTS `survey-db`.`quiz_actions` (\n  `id` INT NOT NULL AUTO_INCREMENT,\n  `at` DATETIME NOT NULL,\n  `quizes_id` INT NOT NULL,\n  `quiz_states_id` INT NOT NULL,\n  PRIMARY KEY (`id`),\n  INDEX `fk_quiz_states_quizes1_idx` (`quizes_id` ASC) VISIBLE,\n  INDEX `fk_quiz_actions_quiz_states1_idx` (`quiz_states_id` ASC) VISIBLE,\n  CONSTRAINT `fk_quiz_states_quizes1`\n    FOREIGN KEY (`quizes_id`)\n    REFERENCES `survey-db`.`quizes` (`id`)\n    ON DELETE NO ACTION\n    ON UPDATE NO ACTION,\n  CONSTRAINT `fk_quiz_actions_quiz_states1`\n    FOREIGN KEY (`quiz_states_id`)\n    REFERENCES `survey-db`.`quiz_states` (`id`)\n    ON DELETE NO ACTION\n    ON UPDATE NO ACTION)\nENGINE = InnoDB;\n\n\n-- -----------------------------------------------------\n-- Table `survey-db`.`results`\n-- -----------------------------------------------------\nDROP TABLE IF EXISTS `survey-db`.`results` ;\n\nCREATE TABLE IF NOT EXISTS `survey-db`.`results` (\n  `id` INT NOT NULL,\n  `options_id` INT NOT NULL,\n  `experts_id` INT NOT NULL,\n  PRIMARY KEY (`id`),\n  INDEX `fk_results_answers1_idx` (`options_id` ASC) VISIBLE,\n  INDEX `fk_results_experts1_idx` (`experts_id` ASC) VISIBLE,\n  CONSTRAINT `fk_results_answers1`\n    FOREIGN KEY (`options_id`)\n    REFERENCES `survey-db`.`options` (`id`)\n    ON DELETE NO ACTION\n    ON UPDATE NO ACTION,\n  CONSTRAINT `fk_results_experts1`\n    FOREIGN KEY (`experts_id`)\n    REFERENCES `survey-db`.`experts` (`id`)\n    ON DELETE NO ACTION\n    ON UPDATE NO ACTION)\nENGINE = InnoDB;\n\n\n-- -----------------------------------------------------\n-- Table `survey-db`.`experts_has_results`\n-- -----------------------------------------------------\nDROP TABLE IF EXISTS `survey-db`.`experts_has_results` ;\n\nCREATE TABLE IF NOT EXISTS `survey-db`.`experts_has_results` (\n  `experts_id` INT NOT NULL,\n  `results_id` INT NOT NULL,\n  PRIMARY KEY (`experts_id`, `results_id`),\n  INDEX `fk_experts_has_results_results1_idx` (`results_id` ASC) VISIBLE,\n  INDEX `fk_experts_has_results_experts1_idx` (`experts_id` ASC) VISIBLE,\n  CONSTRAINT `fk_experts_has_results_experts1`\n    FOREIGN KEY (`experts_id`)\n    REFERENCES `survey-db`.`experts` (`id`)\n    ON DELETE NO ACTION\n    ON UPDATE NO ACTION,\n  CONSTRAINT `fk_experts_has_results_results1`\n    FOREIGN KEY (`results_id`)\n    REFERENCES `survey-db`.`results` (`id`)\n    ON DELETE NO ACTION\n    ON UPDATE NO ACTION)\nENGINE = InnoDB;\n\n\n-- -----------------------------------------------------\n-- Table `survey-db`.`results_has_experts`\n-- -----------------------------------------------------\nDROP TABLE IF EXISTS `survey-db`.`results_has_experts` ;\n\nCREATE TABLE IF NOT EXISTS `survey-db`.`results_has_experts` (\n  `results_id` INT NOT NULL,\n  `experts_id` INT NOT NULL,\n  PRIMARY KEY (`results_id`, `experts_id`),\n  INDEX `fk_results_has_experts_experts1_idx` (`experts_id` ASC) VISIBLE,\n  INDEX `fk_results_has_experts_results1_idx` (`results_id` ASC) VISIBLE,\n  CONSTRAINT `fk_results_has_experts_results1`\n    FOREIGN KEY (`results_id`)\n    REFERENCES `survey-db`.`results` (`id`)\n    ON DELETE NO ACTION\n    ON UPDATE NO ACTION,\n  CONSTRAINT `fk_results_has_experts_experts1`\n    FOREIGN KEY (`experts_id`)\n    REFERENCES `survey-db`.`experts` (`id`)\n    ON DELETE NO ACTION\n    ON UPDATE NO ACTION)\nENGINE = InnoDB;\n\n\n-- -----------------------------------------------------\n-- Table `survey-db`.`experts_has_results1`\n-- -----------------------------------------------------\nDROP TABLE IF EXISTS `survey-db`.`experts_has_results1` ;\n\nCREATE TABLE IF NOT EXISTS `survey-db`.`experts_has_results1` (\n  `experts_id` INT NOT NULL,\n  `results_id` INT NOT NULL,\n  PRIMARY KEY (`experts_id`, `results_id`),\n  INDEX `fk_experts_has_results1_results1_idx` (`results_id` ASC) VISIBLE,\n  INDEX `fk_experts_has_results1_experts1_idx` (`experts_id` ASC) VISIBLE,\n  CONSTRAINT `fk_experts_has_results1_experts1`\n    FOREIGN KEY (`experts_id`)\n    REFERENCES `survey-db`.`experts` (`id`)\n    ON DELETE NO ACTION\n    ON UPDATE NO ACTION,\n  CONSTRAINT `fk_experts_has_results1_results1`\n    FOREIGN KEY (`results_id`)\n    REFERENCES `survey-db`.`results` (`id`)\n    ON DELETE NO ACTION\n    ON UPDATE NO ACTION)\nENGINE = InnoDB;\n\n\nSET SQL_MODE=@OLD_SQL_MODE;\nSET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;\nSET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;\n")])])]),e("h2",{attrs:{id:"restfull-сервіс-для-управління-даними"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#restfull-сервіс-для-управління-даними"}},[n._v("#")]),n._v(" RESTfull сервіс для управління даними")]),n._v(" "),e("h3",{attrs:{id:"вхідна-точка-проєкту"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#вхідна-точка-проєкту"}},[n._v("#")]),n._v(" Вхідна точка проєкту:")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("using Lab6.DataController;\n\nvar builder = WebApplication.CreateBuilder(args);\n\nbuilder.Services.AddSingleton<UsersDataController>();\nbuilder.Services.AddControllers();\nbuilder.Services.AddEndpointsApiExplorer();\nbuilder.Services.AddSwaggerGen();\n\nvar app = builder.Build();\n\n// Configure the HTTP request pipeline.\nif (app.Environment.IsDevelopment())\n{\n    app.UseSwagger();\n    app.UseSwaggerUI();\n}\n\napp.UseHttpsRedirection();\n\napp.UseAuthorization();\n\napp.MapControllers();\n\napp.Run();\n")])])]),e("h3",{attrs:{id:"підключення-до-бази-даних"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#підключення-до-бази-даних"}},[n._v("#")]),n._v(" Підключення до бази даних:")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v('using System.Data.MySqlConnection;\nusing Dapper;\nusing Lab6.DTO;\n\nnamespace Lab6.DataController;\n\npublic class UsersDataController\n{\n    private IConfiguration _configuration;\n    private string ConnectionString => _configuration.GetConnectionString("DefaultConnection");\n\n    public UsersDataController(IConfiguration configuration)\n    {\n        _configuration = configuration;\n    }\n    \n    protected SqlConnection GetConnection()\n    {\n        return new MySqlConnection(ConnectionString);\n    }\n\n    public async Task<IEnumerable<User>> GetAll()\n    {\n        using (var connection = GetConnection())\n        {\n            await connection.OpenAsync();\n            \n            return await connection.QueryAsync<User>("SELECT * FROM users");;\n        }\n    }\n    \n    public async Task<User> GetById(int id)\n    {\n        using (var connection = GetConnection())\n        {\n            await connection.OpenAsync();\n            \n            return await connection.QuerySingleAsync<User>($"SELECT * FROM users WHERE id={id}");;\n        }\n    }\n    \n    public async Task<bool> Update(User user)\n    {\n        using (var connection = GetConnection())\n        {\n            await connection.OpenAsync();\n            var rows = await connection.ExecuteAsync($"UPDATE users SET UserName = \\\'{user.UserName}\\\', Email = \\\'{user.Email}\\\' WHERE id={user.Id}");\n            return rows > 0;\n        }\n    }\n    \n    public async Task<bool> Delete(int id)\n    {\n        using (var connection = GetConnection())\n        {\n            await connection.OpenAsync();\n            \n            var rows = await connection.ExecuteAsync($"DELETE FROM users WHERE id = {id}");\n            return rows > 0;\n        }\n    }\n    \n    public async Task<bool> Create(User user)\n    {\n        using (var connection = GetConnection())\n        {\n            await connection.OpenAsync();\n            var rows = await connection.ExecuteAsync($"INSERT INTO users VALUES(\\\'{user.UserName}\\\', \\\'{user.Email}\\\')");\n            return rows > 0;\n        }\n    }\n}\n')])])]),e("h5",{attrs:{id:"defaultconnection-server-localhost-database-labdb-user-myuser-password"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#defaultconnection-server-localhost-database-labdb-user-myuser-password"}},[n._v("#")]),n._v(' "DefaultConnection": "Server=localhost;Database=labdb;User=myuser;Password=***"')]),n._v(" "),e("h3",{attrs:{id:"контролер"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#контролер"}},[n._v("#")]),n._v(" Контролер:")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v('using Lab6.DataController;\nusing Lab6.DTO;\nusing Microsoft.AspNetCore.Mvc;\n\nnamespace Lab6.Controllers;\n\n[ApiController]\n[Route("[controller]")]\npublic class UserController : ControllerBase\n{\n    private readonly ILogger<UserController> _logger;\n    public readonly UsersDataController DataController;\n\n    public UserController(ILogger<UserController> logger, UsersDataController dataController)\n    {\n        _logger = logger;\n        DataController = dataController;\n    }\n    \n    [HttpGet]\n    public async Task<IEnumerable<User>> GetAll()\n    {\n        var a = await DataController.GetAll();\n        return a;\n    }\n    [HttpGet("{id}")]\n    public async Task<User> GetById(int id)\n    {\n        return await DataController.GetById(id);\n    }\n    \n    [HttpPost]\n    public async Task<bool> Create([FromBody] User user)\n    {\n        return await DataController.Create(user);\n    }\n    \n    [HttpPut]\n    public async Task<bool> Update([FromBody] User user)\n    {\n        return await DataController.Update(user);\n    }\n    \n    [HttpDelete]\n    public async Task<bool> Update([FromBody] int id)\n    {\n        return await DataController.Delete(id);\n    }\n}\n')])])])])}),[],!1,null,null,null);s.default=E.exports}}]);